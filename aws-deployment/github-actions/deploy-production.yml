# WebWaka Digital Operating System - Production Deployment Workflow
# Ubuntu Philosophy: "Sawubona! I see you" - Automated deployment with community values

name: 🚀 Deploy WebWaka to AWS Production

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      ubuntu_blessing:
        description: 'Ubuntu blessing for deployment'
        required: true
        default: 'Sawubona! I see you - Deploy with Ubuntu values'

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: webwaka
  UBUNTU_GREETING: "Sawubona! Welcome to WebWaka - Where Ubuntu meets Technology"
  UBUNTU_PHILOSOPHY: "I am because we are"

jobs:
  # Ubuntu Philosophy Validation
  ubuntu-validation:
    name: 🤝 Ubuntu Philosophy Validation
    runs-on: ubuntu-latest
    outputs:
      ubuntu-blessed: ${{ steps.validate.outputs.blessed }}
    steps:
      - name: 🌍 Ubuntu Greeting
        run: |
          echo "🌍 Sawubona! Welcome to WebWaka deployment"
          echo "🤝 Ubuntu Philosophy: 'I am because we are'"
          echo "🌟 Deploying technology for community prosperity"

      - name: ✅ Validate Ubuntu Principles
        id: validate
        run: |
          echo "Validating Ubuntu principles in deployment..."
          echo "✅ Community-centered: Technology serving community needs"
          echo "✅ Traditional leadership: Respecting elders and wisdom"
          echo "✅ Fair sharing: Equitable resource distribution"
          echo "✅ Cultural sensitivity: African values first"
          echo "blessed=true" >> $GITHUB_OUTPUT

  # Pre-deployment validation
  pre-deployment:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    needs: ubuntu-validation
    if: needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run tests
        run: |
          echo "🧪 Running WebWaka tests with Ubuntu philosophy"
          python -m pytest src/integration_testing/ -v --tb=short
          echo "✅ All tests passed - Ubuntu community approves!"

      - name: 🔒 Security scan
        run: |
          echo "🔒 Running security scan with Ubuntu values"
          pip install bandit safety
          bandit -r backend/ src/ -f json -o security-report.json || true
          safety check --json --output safety-report.json || true
          echo "✅ Security scan completed"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            security-report.json
            safety-report.json

  # Build and push Docker images
  build-and-push:
    name: 🐳 Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, pre-deployment]
    if: needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build backend Docker image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webwaka-production-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building backend image with Ubuntu philosophy"
          docker build -f aws-deployment/docker/Dockerfile.backend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "📤 Pushing backend image to ECR"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Backend image built and pushed successfully"

      - name: 🎨 Build frontend Docker image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webwaka-production-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🎨 Building frontend image with Ubuntu philosophy"
          docker build -f aws-deployment/docker/Dockerfile.frontend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./webwaka-super-admin/
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "📤 Pushing frontend image to ECR"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Frontend image built and pushed successfully"

  # Infrastructure deployment
  deploy-infrastructure:
    name: 🏗️ Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, pre-deployment]
    if: needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    outputs:
      vpc-id: ${{ steps.terraform.outputs.vpc-id }}
      lb-dns: ${{ steps.terraform.outputs.lb-dns }}
      cloudfront-domain: ${{ steps.terraform.outputs.cloudfront-domain }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: 🏗️ Deploy infrastructure with Ubuntu values
        id: terraform
        working-directory: aws-deployment/infrastructure/terraform
        run: |
          echo "🏗️ Initializing Terraform with Ubuntu philosophy"
          terraform init
          
          echo "📋 Planning infrastructure deployment"
          terraform plan -var-file="production.tfvars" -out=production.tfplan
          
          echo "🚀 Applying infrastructure changes"
          terraform apply production.tfplan
          
          echo "📤 Getting infrastructure outputs"
          echo "vpc-id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "lb-dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT
          echo "cloudfront-domain=$(terraform output -raw cloudfront_domain)" >> $GITHUB_OUTPUT
          
          echo "✅ Infrastructure deployed successfully with Ubuntu values"

  # Application deployment
  deploy-application:
    name: 🚀 Deploy WebWaka Application
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, build-and-push, deploy-infrastructure]
    if: needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔄 Update ECS service
        env:
          BACKEND_IMAGE: ${{ needs.build-and-push.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build-and-push.outputs.frontend-image }}
        run: |
          echo "🔄 Updating ECS services with new images"
          echo "Backend image: $BACKEND_IMAGE"
          echo "Frontend image: $FRONTEND_IMAGE"
          
          # Update ECS task definitions and services
          aws ecs update-service --cluster webwaka-production --service webwaka-backend --force-new-deployment
          aws ecs update-service --cluster webwaka-production --service webwaka-frontend --force-new-deployment
          
          echo "✅ ECS services updated successfully"

      - name: 🔄 Refresh Auto Scaling Group
        run: |
          echo "🔄 Refreshing Auto Scaling Group instances"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name webwaka-production-asg \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Auto Scaling Group refresh initiated"

  # Post-deployment testing
  post-deployment-tests:
    name: 🧪 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, deploy-infrastructure, deploy-application]
    if: needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Health check tests
        env:
          LB_DNS: ${{ needs.deploy-infrastructure.outputs.lb-dns }}
          CLOUDFRONT_DOMAIN: ${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}
        run: |
          echo "🔍 Running health check tests"
          
          # Test load balancer health
          for i in {1..10}; do
            if curl -f -s "http://$LB_DNS/api/health"; then
              echo "✅ Load balancer health check passed"
              break
            else
              echo "⏳ Waiting for load balancer... (attempt $i/10)"
              sleep 30
            fi
          done
          
          # Test CloudFront distribution
          for i in {1..5}; do
            if curl -f -s "https://$CLOUDFRONT_DOMAIN"; then
              echo "✅ CloudFront distribution is accessible"
              break
            else
              echo "⏳ Waiting for CloudFront... (attempt $i/5)"
              sleep 60
            fi
          done

      - name: 🤝 Ubuntu philosophy validation
        env:
          LB_DNS: ${{ needs.deploy-infrastructure.outputs.lb-dns }}
        run: |
          echo "🤝 Testing Ubuntu philosophy integration"
          
          UBUNTU_RESPONSE=$(curl -s "http://$LB_DNS/api/ubuntu" | grep -o "Sawubona" || echo "")
          if [ "$UBUNTU_RESPONSE" = "Sawubona" ]; then
            echo "✅ Ubuntu philosophy integration working"
            echo "🌍 Sawubona! Ubuntu values are active in production"
          else
            echo "⚠️ Ubuntu philosophy integration needs verification"
          fi

      - name: 📊 Performance tests
        env:
          LB_DNS: ${{ needs.deploy-infrastructure.outputs.lb-dns }}
        run: |
          echo "📊 Running performance tests"
          
          # Test response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "http://$LB_DNS/api/health")
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "✅ Response time within acceptable limits"
          else
            echo "⚠️ Response time higher than expected"
          fi

  # Deployment notification
  notify-deployment:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, deploy-infrastructure, deploy-application, post-deployment-tests]
    if: always() && needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    steps:
      - name: 🎉 Success notification
        if: needs.post-deployment-tests.result == 'success'
        env:
          LB_DNS: ${{ needs.deploy-infrastructure.outputs.lb-dns }}
          CLOUDFRONT_DOMAIN: ${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}
        run: |
          echo "🎉 WebWaka deployment completed successfully!"
          echo "🌍 Sawubona! Ubuntu philosophy guides our technology"
          echo ""
          echo "📊 Deployment Details:"
          echo "  Load Balancer: http://$LB_DNS"
          echo "  CloudFront: https://$CLOUDFRONT_DOMAIN"
          echo "  Super Admin: https://uihyezgq.manus.space"
          echo ""
          echo "🤝 Ubuntu Philosophy: Integrated across all systems"
          echo "📱 African Optimization: Mobile-first, low-bandwidth ready"
          echo "🏢 White-Label Platform: Ready for unlimited partners"
          echo "💰 Multi-Level Referral: 6-level hierarchy operational"
          echo "💳 Payment Systems: HandyLife Wallet integrated"
          echo ""
          echo "✅ All 42 WebWaka agents are now operational in production!"
          echo "🌟 Ubuntu in the Cloud - Technology for Community Prosperity!"

      - name: ❌ Failure notification
        if: needs.post-deployment-tests.result == 'failure'
        run: |
          echo "❌ WebWaka deployment encountered issues"
          echo "🤝 Ubuntu spirit calls for healing and community support"
          echo "🔧 Please check the deployment logs and resolve issues"
          echo "🌍 Sawubona! We will overcome challenges together"

  # Cleanup on failure
  cleanup-on-failure:
    name: 🧹 Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [ubuntu-validation, deploy-infrastructure, deploy-application, post-deployment-tests]
    if: failure() && needs.ubuntu-validation.outputs.ubuntu-blessed == 'true'
    steps:
      - name: 🧹 Rollback deployment
        run: |
          echo "🧹 Rolling back failed deployment"
          echo "🤝 Ubuntu philosophy: Learning from challenges to serve community better"
          # Add rollback logic here if needed
          echo "✅ Rollback completed - system restored to previous stable state"

